/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.DivvyTrips;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-07")
public class DivvyTrips implements org.apache.thrift.TBase<DivvyTrips, DivvyTrips._Fields>, java.io.Serializable, Cloneable, Comparable<DivvyTrips> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DivvyTrips");

  private static final org.apache.thrift.protocol.TField TRIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tripID", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STARTDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("startday", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STARTMONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("startmonth", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STARTYEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("startyear", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STARTHOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("starthour", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STARTMINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("startminute", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ENDDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("endday", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ENDMONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("endmonth", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ENDYEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("endyear", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ENDHOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("endhour", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ENDMINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("endminute", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField BICYCLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bicycleID", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField TRIPDURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("tripduration", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField FROMSTATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromstationID", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField FROMSTATIONNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromstationname", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TOSTATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tostationID", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField TOSTATIONNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tostationname", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField USERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("usertype", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField BIRTHYEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("birthyear", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DivvyTripsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DivvyTripsTupleSchemeFactory());
  }

  public long tripID; // required
  public int startday; // required
  public int startmonth; // required
  public int startyear; // required
  public int starthour; // required
  public int startminute; // required
  public int endday; // required
  public int endmonth; // required
  public int endyear; // required
  public int endhour; // required
  public int endminute; // required
  public long bicycleID; // required
  public long tripduration; // required
  public long fromstationID; // required
  public String fromstationname; // required
  public long tostationID; // required
  public String tostationname; // required
  public String usertype; // required
  public boolean gender; // optional
  public int birthyear; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRIP_ID((short)1, "tripID"),
    STARTDAY((short)2, "startday"),
    STARTMONTH((short)3, "startmonth"),
    STARTYEAR((short)4, "startyear"),
    STARTHOUR((short)5, "starthour"),
    STARTMINUTE((short)6, "startminute"),
    ENDDAY((short)7, "endday"),
    ENDMONTH((short)8, "endmonth"),
    ENDYEAR((short)9, "endyear"),
    ENDHOUR((short)10, "endhour"),
    ENDMINUTE((short)11, "endminute"),
    BICYCLE_ID((short)12, "bicycleID"),
    TRIPDURATION((short)13, "tripduration"),
    FROMSTATION_ID((short)14, "fromstationID"),
    FROMSTATIONNAME((short)15, "fromstationname"),
    TOSTATION_ID((short)16, "tostationID"),
    TOSTATIONNAME((short)17, "tostationname"),
    USERTYPE((short)18, "usertype"),
    GENDER((short)19, "gender"),
    BIRTHYEAR((short)20, "birthyear");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRIP_ID
          return TRIP_ID;
        case 2: // STARTDAY
          return STARTDAY;
        case 3: // STARTMONTH
          return STARTMONTH;
        case 4: // STARTYEAR
          return STARTYEAR;
        case 5: // STARTHOUR
          return STARTHOUR;
        case 6: // STARTMINUTE
          return STARTMINUTE;
        case 7: // ENDDAY
          return ENDDAY;
        case 8: // ENDMONTH
          return ENDMONTH;
        case 9: // ENDYEAR
          return ENDYEAR;
        case 10: // ENDHOUR
          return ENDHOUR;
        case 11: // ENDMINUTE
          return ENDMINUTE;
        case 12: // BICYCLE_ID
          return BICYCLE_ID;
        case 13: // TRIPDURATION
          return TRIPDURATION;
        case 14: // FROMSTATION_ID
          return FROMSTATION_ID;
        case 15: // FROMSTATIONNAME
          return FROMSTATIONNAME;
        case 16: // TOSTATION_ID
          return TOSTATION_ID;
        case 17: // TOSTATIONNAME
          return TOSTATIONNAME;
        case 18: // USERTYPE
          return USERTYPE;
        case 19: // GENDER
          return GENDER;
        case 20: // BIRTHYEAR
          return BIRTHYEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRIPID_ISSET_ID = 0;
  private static final int __STARTDAY_ISSET_ID = 1;
  private static final int __STARTMONTH_ISSET_ID = 2;
  private static final int __STARTYEAR_ISSET_ID = 3;
  private static final int __STARTHOUR_ISSET_ID = 4;
  private static final int __STARTMINUTE_ISSET_ID = 5;
  private static final int __ENDDAY_ISSET_ID = 6;
  private static final int __ENDMONTH_ISSET_ID = 7;
  private static final int __ENDYEAR_ISSET_ID = 8;
  private static final int __ENDHOUR_ISSET_ID = 9;
  private static final int __ENDMINUTE_ISSET_ID = 10;
  private static final int __BICYCLEID_ISSET_ID = 11;
  private static final int __TRIPDURATION_ISSET_ID = 12;
  private static final int __FROMSTATIONID_ISSET_ID = 13;
  private static final int __TOSTATIONID_ISSET_ID = 14;
  private static final int __GENDER_ISSET_ID = 15;
  private static final int __BIRTHYEAR_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GENDER,_Fields.BIRTHYEAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRIP_ID, new org.apache.thrift.meta_data.FieldMetaData("tripID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STARTDAY, new org.apache.thrift.meta_data.FieldMetaData("startday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STARTMONTH, new org.apache.thrift.meta_data.FieldMetaData("startmonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STARTYEAR, new org.apache.thrift.meta_data.FieldMetaData("startyear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STARTHOUR, new org.apache.thrift.meta_data.FieldMetaData("starthour", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STARTMINUTE, new org.apache.thrift.meta_data.FieldMetaData("startminute", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDDAY, new org.apache.thrift.meta_data.FieldMetaData("endday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDMONTH, new org.apache.thrift.meta_data.FieldMetaData("endmonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDYEAR, new org.apache.thrift.meta_data.FieldMetaData("endyear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDHOUR, new org.apache.thrift.meta_data.FieldMetaData("endhour", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDMINUTE, new org.apache.thrift.meta_data.FieldMetaData("endminute", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BICYCLE_ID, new org.apache.thrift.meta_data.FieldMetaData("bicycleID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRIPDURATION, new org.apache.thrift.meta_data.FieldMetaData("tripduration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FROMSTATION_ID, new org.apache.thrift.meta_data.FieldMetaData("fromstationID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FROMSTATIONNAME, new org.apache.thrift.meta_data.FieldMetaData("fromstationname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOSTATION_ID, new org.apache.thrift.meta_data.FieldMetaData("tostationID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOSTATIONNAME, new org.apache.thrift.meta_data.FieldMetaData("tostationname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERTYPE, new org.apache.thrift.meta_data.FieldMetaData("usertype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BIRTHYEAR, new org.apache.thrift.meta_data.FieldMetaData("birthyear", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DivvyTrips.class, metaDataMap);
  }

  public DivvyTrips() {
  }

  public DivvyTrips(
    long tripID,
    int startday,
    int startmonth,
    int startyear,
    int starthour,
    int startminute,
    int endday,
    int endmonth,
    int endyear,
    int endhour,
    int endminute,
    long bicycleID,
    long tripduration,
    long fromstationID,
    String fromstationname,
    long tostationID,
    String tostationname,
    String usertype)
  {
    this();
    this.tripID = tripID;
    setTripIDIsSet(true);
    this.startday = startday;
    setStartdayIsSet(true);
    this.startmonth = startmonth;
    setStartmonthIsSet(true);
    this.startyear = startyear;
    setStartyearIsSet(true);
    this.starthour = starthour;
    setStarthourIsSet(true);
    this.startminute = startminute;
    setStartminuteIsSet(true);
    this.endday = endday;
    setEnddayIsSet(true);
    this.endmonth = endmonth;
    setEndmonthIsSet(true);
    this.endyear = endyear;
    setEndyearIsSet(true);
    this.endhour = endhour;
    setEndhourIsSet(true);
    this.endminute = endminute;
    setEndminuteIsSet(true);
    this.bicycleID = bicycleID;
    setBicycleIDIsSet(true);
    this.tripduration = tripduration;
    setTripdurationIsSet(true);
    this.fromstationID = fromstationID;
    setFromstationIDIsSet(true);
    this.fromstationname = fromstationname;
    this.tostationID = tostationID;
    setTostationIDIsSet(true);
    this.tostationname = tostationname;
    this.usertype = usertype;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DivvyTrips(DivvyTrips other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tripID = other.tripID;
    this.startday = other.startday;
    this.startmonth = other.startmonth;
    this.startyear = other.startyear;
    this.starthour = other.starthour;
    this.startminute = other.startminute;
    this.endday = other.endday;
    this.endmonth = other.endmonth;
    this.endyear = other.endyear;
    this.endhour = other.endhour;
    this.endminute = other.endminute;
    this.bicycleID = other.bicycleID;
    this.tripduration = other.tripduration;
    this.fromstationID = other.fromstationID;
    if (other.isSetFromstationname()) {
      this.fromstationname = other.fromstationname;
    }
    this.tostationID = other.tostationID;
    if (other.isSetTostationname()) {
      this.tostationname = other.tostationname;
    }
    if (other.isSetUsertype()) {
      this.usertype = other.usertype;
    }
    this.gender = other.gender;
    this.birthyear = other.birthyear;
  }

  public DivvyTrips deepCopy() {
    return new DivvyTrips(this);
  }

  @Override
  public void clear() {
    setTripIDIsSet(false);
    this.tripID = 0;
    setStartdayIsSet(false);
    this.startday = 0;
    setStartmonthIsSet(false);
    this.startmonth = 0;
    setStartyearIsSet(false);
    this.startyear = 0;
    setStarthourIsSet(false);
    this.starthour = 0;
    setStartminuteIsSet(false);
    this.startminute = 0;
    setEnddayIsSet(false);
    this.endday = 0;
    setEndmonthIsSet(false);
    this.endmonth = 0;
    setEndyearIsSet(false);
    this.endyear = 0;
    setEndhourIsSet(false);
    this.endhour = 0;
    setEndminuteIsSet(false);
    this.endminute = 0;
    setBicycleIDIsSet(false);
    this.bicycleID = 0;
    setTripdurationIsSet(false);
    this.tripduration = 0;
    setFromstationIDIsSet(false);
    this.fromstationID = 0;
    this.fromstationname = null;
    setTostationIDIsSet(false);
    this.tostationID = 0;
    this.tostationname = null;
    this.usertype = null;
    setGenderIsSet(false);
    this.gender = false;
    setBirthyearIsSet(false);
    this.birthyear = 0;
  }

  public long getTripID() {
    return this.tripID;
  }

  public DivvyTrips setTripID(long tripID) {
    this.tripID = tripID;
    setTripIDIsSet(true);
    return this;
  }

  public void unsetTripID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIPID_ISSET_ID);
  }

  /** Returns true if field tripID is set (has been assigned a value) and false otherwise */
  public boolean isSetTripID() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIPID_ISSET_ID);
  }

  public void setTripIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIPID_ISSET_ID, value);
  }

  public int getStartday() {
    return this.startday;
  }

  public DivvyTrips setStartday(int startday) {
    this.startday = startday;
    setStartdayIsSet(true);
    return this;
  }

  public void unsetStartday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDAY_ISSET_ID);
  }

  /** Returns true if field startday is set (has been assigned a value) and false otherwise */
  public boolean isSetStartday() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTDAY_ISSET_ID);
  }

  public void setStartdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDAY_ISSET_ID, value);
  }

  public int getStartmonth() {
    return this.startmonth;
  }

  public DivvyTrips setStartmonth(int startmonth) {
    this.startmonth = startmonth;
    setStartmonthIsSet(true);
    return this;
  }

  public void unsetStartmonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTMONTH_ISSET_ID);
  }

  /** Returns true if field startmonth is set (has been assigned a value) and false otherwise */
  public boolean isSetStartmonth() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTMONTH_ISSET_ID);
  }

  public void setStartmonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTMONTH_ISSET_ID, value);
  }

  public int getStartyear() {
    return this.startyear;
  }

  public DivvyTrips setStartyear(int startyear) {
    this.startyear = startyear;
    setStartyearIsSet(true);
    return this;
  }

  public void unsetStartyear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTYEAR_ISSET_ID);
  }

  /** Returns true if field startyear is set (has been assigned a value) and false otherwise */
  public boolean isSetStartyear() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTYEAR_ISSET_ID);
  }

  public void setStartyearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTYEAR_ISSET_ID, value);
  }

  public int getStarthour() {
    return this.starthour;
  }

  public DivvyTrips setStarthour(int starthour) {
    this.starthour = starthour;
    setStarthourIsSet(true);
    return this;
  }

  public void unsetStarthour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTHOUR_ISSET_ID);
  }

  /** Returns true if field starthour is set (has been assigned a value) and false otherwise */
  public boolean isSetStarthour() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTHOUR_ISSET_ID);
  }

  public void setStarthourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTHOUR_ISSET_ID, value);
  }

  public int getStartminute() {
    return this.startminute;
  }

  public DivvyTrips setStartminute(int startminute) {
    this.startminute = startminute;
    setStartminuteIsSet(true);
    return this;
  }

  public void unsetStartminute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTMINUTE_ISSET_ID);
  }

  /** Returns true if field startminute is set (has been assigned a value) and false otherwise */
  public boolean isSetStartminute() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTMINUTE_ISSET_ID);
  }

  public void setStartminuteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTMINUTE_ISSET_ID, value);
  }

  public int getEndday() {
    return this.endday;
  }

  public DivvyTrips setEndday(int endday) {
    this.endday = endday;
    setEnddayIsSet(true);
    return this;
  }

  public void unsetEndday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDAY_ISSET_ID);
  }

  /** Returns true if field endday is set (has been assigned a value) and false otherwise */
  public boolean isSetEndday() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDAY_ISSET_ID);
  }

  public void setEnddayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDAY_ISSET_ID, value);
  }

  public int getEndmonth() {
    return this.endmonth;
  }

  public DivvyTrips setEndmonth(int endmonth) {
    this.endmonth = endmonth;
    setEndmonthIsSet(true);
    return this;
  }

  public void unsetEndmonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDMONTH_ISSET_ID);
  }

  /** Returns true if field endmonth is set (has been assigned a value) and false otherwise */
  public boolean isSetEndmonth() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDMONTH_ISSET_ID);
  }

  public void setEndmonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDMONTH_ISSET_ID, value);
  }

  public int getEndyear() {
    return this.endyear;
  }

  public DivvyTrips setEndyear(int endyear) {
    this.endyear = endyear;
    setEndyearIsSet(true);
    return this;
  }

  public void unsetEndyear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDYEAR_ISSET_ID);
  }

  /** Returns true if field endyear is set (has been assigned a value) and false otherwise */
  public boolean isSetEndyear() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDYEAR_ISSET_ID);
  }

  public void setEndyearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDYEAR_ISSET_ID, value);
  }

  public int getEndhour() {
    return this.endhour;
  }

  public DivvyTrips setEndhour(int endhour) {
    this.endhour = endhour;
    setEndhourIsSet(true);
    return this;
  }

  public void unsetEndhour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDHOUR_ISSET_ID);
  }

  /** Returns true if field endhour is set (has been assigned a value) and false otherwise */
  public boolean isSetEndhour() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDHOUR_ISSET_ID);
  }

  public void setEndhourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDHOUR_ISSET_ID, value);
  }

  public int getEndminute() {
    return this.endminute;
  }

  public DivvyTrips setEndminute(int endminute) {
    this.endminute = endminute;
    setEndminuteIsSet(true);
    return this;
  }

  public void unsetEndminute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDMINUTE_ISSET_ID);
  }

  /** Returns true if field endminute is set (has been assigned a value) and false otherwise */
  public boolean isSetEndminute() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDMINUTE_ISSET_ID);
  }

  public void setEndminuteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDMINUTE_ISSET_ID, value);
  }

  public long getBicycleID() {
    return this.bicycleID;
  }

  public DivvyTrips setBicycleID(long bicycleID) {
    this.bicycleID = bicycleID;
    setBicycleIDIsSet(true);
    return this;
  }

  public void unsetBicycleID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BICYCLEID_ISSET_ID);
  }

  /** Returns true if field bicycleID is set (has been assigned a value) and false otherwise */
  public boolean isSetBicycleID() {
    return EncodingUtils.testBit(__isset_bitfield, __BICYCLEID_ISSET_ID);
  }

  public void setBicycleIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BICYCLEID_ISSET_ID, value);
  }

  public long getTripduration() {
    return this.tripduration;
  }

  public DivvyTrips setTripduration(long tripduration) {
    this.tripduration = tripduration;
    setTripdurationIsSet(true);
    return this;
  }

  public void unsetTripduration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIPDURATION_ISSET_ID);
  }

  /** Returns true if field tripduration is set (has been assigned a value) and false otherwise */
  public boolean isSetTripduration() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIPDURATION_ISSET_ID);
  }

  public void setTripdurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIPDURATION_ISSET_ID, value);
  }

  public long getFromstationID() {
    return this.fromstationID;
  }

  public DivvyTrips setFromstationID(long fromstationID) {
    this.fromstationID = fromstationID;
    setFromstationIDIsSet(true);
    return this;
  }

  public void unsetFromstationID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMSTATIONID_ISSET_ID);
  }

  /** Returns true if field fromstationID is set (has been assigned a value) and false otherwise */
  public boolean isSetFromstationID() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMSTATIONID_ISSET_ID);
  }

  public void setFromstationIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMSTATIONID_ISSET_ID, value);
  }

  public String getFromstationname() {
    return this.fromstationname;
  }

  public DivvyTrips setFromstationname(String fromstationname) {
    this.fromstationname = fromstationname;
    return this;
  }

  public void unsetFromstationname() {
    this.fromstationname = null;
  }

  /** Returns true if field fromstationname is set (has been assigned a value) and false otherwise */
  public boolean isSetFromstationname() {
    return this.fromstationname != null;
  }

  public void setFromstationnameIsSet(boolean value) {
    if (!value) {
      this.fromstationname = null;
    }
  }

  public long getTostationID() {
    return this.tostationID;
  }

  public DivvyTrips setTostationID(long tostationID) {
    this.tostationID = tostationID;
    setTostationIDIsSet(true);
    return this;
  }

  public void unsetTostationID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOSTATIONID_ISSET_ID);
  }

  /** Returns true if field tostationID is set (has been assigned a value) and false otherwise */
  public boolean isSetTostationID() {
    return EncodingUtils.testBit(__isset_bitfield, __TOSTATIONID_ISSET_ID);
  }

  public void setTostationIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOSTATIONID_ISSET_ID, value);
  }

  public String getTostationname() {
    return this.tostationname;
  }

  public DivvyTrips setTostationname(String tostationname) {
    this.tostationname = tostationname;
    return this;
  }

  public void unsetTostationname() {
    this.tostationname = null;
  }

  /** Returns true if field tostationname is set (has been assigned a value) and false otherwise */
  public boolean isSetTostationname() {
    return this.tostationname != null;
  }

  public void setTostationnameIsSet(boolean value) {
    if (!value) {
      this.tostationname = null;
    }
  }

  public String getUsertype() {
    return this.usertype;
  }

  public DivvyTrips setUsertype(String usertype) {
    this.usertype = usertype;
    return this;
  }

  public void unsetUsertype() {
    this.usertype = null;
  }

  /** Returns true if field usertype is set (has been assigned a value) and false otherwise */
  public boolean isSetUsertype() {
    return this.usertype != null;
  }

  public void setUsertypeIsSet(boolean value) {
    if (!value) {
      this.usertype = null;
    }
  }

  public boolean isGender() {
    return this.gender;
  }

  public DivvyTrips setGender(boolean gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public int getBirthyear() {
    return this.birthyear;
  }

  public DivvyTrips setBirthyear(int birthyear) {
    this.birthyear = birthyear;
    setBirthyearIsSet(true);
    return this;
  }

  public void unsetBirthyear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID);
  }

  /** Returns true if field birthyear is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthyear() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID);
  }

  public void setBirthyearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRIP_ID:
      if (value == null) {
        unsetTripID();
      } else {
        setTripID((Long)value);
      }
      break;

    case STARTDAY:
      if (value == null) {
        unsetStartday();
      } else {
        setStartday((Integer)value);
      }
      break;

    case STARTMONTH:
      if (value == null) {
        unsetStartmonth();
      } else {
        setStartmonth((Integer)value);
      }
      break;

    case STARTYEAR:
      if (value == null) {
        unsetStartyear();
      } else {
        setStartyear((Integer)value);
      }
      break;

    case STARTHOUR:
      if (value == null) {
        unsetStarthour();
      } else {
        setStarthour((Integer)value);
      }
      break;

    case STARTMINUTE:
      if (value == null) {
        unsetStartminute();
      } else {
        setStartminute((Integer)value);
      }
      break;

    case ENDDAY:
      if (value == null) {
        unsetEndday();
      } else {
        setEndday((Integer)value);
      }
      break;

    case ENDMONTH:
      if (value == null) {
        unsetEndmonth();
      } else {
        setEndmonth((Integer)value);
      }
      break;

    case ENDYEAR:
      if (value == null) {
        unsetEndyear();
      } else {
        setEndyear((Integer)value);
      }
      break;

    case ENDHOUR:
      if (value == null) {
        unsetEndhour();
      } else {
        setEndhour((Integer)value);
      }
      break;

    case ENDMINUTE:
      if (value == null) {
        unsetEndminute();
      } else {
        setEndminute((Integer)value);
      }
      break;

    case BICYCLE_ID:
      if (value == null) {
        unsetBicycleID();
      } else {
        setBicycleID((Long)value);
      }
      break;

    case TRIPDURATION:
      if (value == null) {
        unsetTripduration();
      } else {
        setTripduration((Long)value);
      }
      break;

    case FROMSTATION_ID:
      if (value == null) {
        unsetFromstationID();
      } else {
        setFromstationID((Long)value);
      }
      break;

    case FROMSTATIONNAME:
      if (value == null) {
        unsetFromstationname();
      } else {
        setFromstationname((String)value);
      }
      break;

    case TOSTATION_ID:
      if (value == null) {
        unsetTostationID();
      } else {
        setTostationID((Long)value);
      }
      break;

    case TOSTATIONNAME:
      if (value == null) {
        unsetTostationname();
      } else {
        setTostationname((String)value);
      }
      break;

    case USERTYPE:
      if (value == null) {
        unsetUsertype();
      } else {
        setUsertype((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Boolean)value);
      }
      break;

    case BIRTHYEAR:
      if (value == null) {
        unsetBirthyear();
      } else {
        setBirthyear((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRIP_ID:
      return getTripID();

    case STARTDAY:
      return getStartday();

    case STARTMONTH:
      return getStartmonth();

    case STARTYEAR:
      return getStartyear();

    case STARTHOUR:
      return getStarthour();

    case STARTMINUTE:
      return getStartminute();

    case ENDDAY:
      return getEndday();

    case ENDMONTH:
      return getEndmonth();

    case ENDYEAR:
      return getEndyear();

    case ENDHOUR:
      return getEndhour();

    case ENDMINUTE:
      return getEndminute();

    case BICYCLE_ID:
      return getBicycleID();

    case TRIPDURATION:
      return getTripduration();

    case FROMSTATION_ID:
      return getFromstationID();

    case FROMSTATIONNAME:
      return getFromstationname();

    case TOSTATION_ID:
      return getTostationID();

    case TOSTATIONNAME:
      return getTostationname();

    case USERTYPE:
      return getUsertype();

    case GENDER:
      return isGender();

    case BIRTHYEAR:
      return getBirthyear();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRIP_ID:
      return isSetTripID();
    case STARTDAY:
      return isSetStartday();
    case STARTMONTH:
      return isSetStartmonth();
    case STARTYEAR:
      return isSetStartyear();
    case STARTHOUR:
      return isSetStarthour();
    case STARTMINUTE:
      return isSetStartminute();
    case ENDDAY:
      return isSetEndday();
    case ENDMONTH:
      return isSetEndmonth();
    case ENDYEAR:
      return isSetEndyear();
    case ENDHOUR:
      return isSetEndhour();
    case ENDMINUTE:
      return isSetEndminute();
    case BICYCLE_ID:
      return isSetBicycleID();
    case TRIPDURATION:
      return isSetTripduration();
    case FROMSTATION_ID:
      return isSetFromstationID();
    case FROMSTATIONNAME:
      return isSetFromstationname();
    case TOSTATION_ID:
      return isSetTostationID();
    case TOSTATIONNAME:
      return isSetTostationname();
    case USERTYPE:
      return isSetUsertype();
    case GENDER:
      return isSetGender();
    case BIRTHYEAR:
      return isSetBirthyear();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DivvyTrips)
      return this.equals((DivvyTrips)that);
    return false;
  }

  public boolean equals(DivvyTrips that) {
    if (that == null)
      return false;

    boolean this_present_tripID = true;
    boolean that_present_tripID = true;
    if (this_present_tripID || that_present_tripID) {
      if (!(this_present_tripID && that_present_tripID))
        return false;
      if (this.tripID != that.tripID)
        return false;
    }

    boolean this_present_startday = true;
    boolean that_present_startday = true;
    if (this_present_startday || that_present_startday) {
      if (!(this_present_startday && that_present_startday))
        return false;
      if (this.startday != that.startday)
        return false;
    }

    boolean this_present_startmonth = true;
    boolean that_present_startmonth = true;
    if (this_present_startmonth || that_present_startmonth) {
      if (!(this_present_startmonth && that_present_startmonth))
        return false;
      if (this.startmonth != that.startmonth)
        return false;
    }

    boolean this_present_startyear = true;
    boolean that_present_startyear = true;
    if (this_present_startyear || that_present_startyear) {
      if (!(this_present_startyear && that_present_startyear))
        return false;
      if (this.startyear != that.startyear)
        return false;
    }

    boolean this_present_starthour = true;
    boolean that_present_starthour = true;
    if (this_present_starthour || that_present_starthour) {
      if (!(this_present_starthour && that_present_starthour))
        return false;
      if (this.starthour != that.starthour)
        return false;
    }

    boolean this_present_startminute = true;
    boolean that_present_startminute = true;
    if (this_present_startminute || that_present_startminute) {
      if (!(this_present_startminute && that_present_startminute))
        return false;
      if (this.startminute != that.startminute)
        return false;
    }

    boolean this_present_endday = true;
    boolean that_present_endday = true;
    if (this_present_endday || that_present_endday) {
      if (!(this_present_endday && that_present_endday))
        return false;
      if (this.endday != that.endday)
        return false;
    }

    boolean this_present_endmonth = true;
    boolean that_present_endmonth = true;
    if (this_present_endmonth || that_present_endmonth) {
      if (!(this_present_endmonth && that_present_endmonth))
        return false;
      if (this.endmonth != that.endmonth)
        return false;
    }

    boolean this_present_endyear = true;
    boolean that_present_endyear = true;
    if (this_present_endyear || that_present_endyear) {
      if (!(this_present_endyear && that_present_endyear))
        return false;
      if (this.endyear != that.endyear)
        return false;
    }

    boolean this_present_endhour = true;
    boolean that_present_endhour = true;
    if (this_present_endhour || that_present_endhour) {
      if (!(this_present_endhour && that_present_endhour))
        return false;
      if (this.endhour != that.endhour)
        return false;
    }

    boolean this_present_endminute = true;
    boolean that_present_endminute = true;
    if (this_present_endminute || that_present_endminute) {
      if (!(this_present_endminute && that_present_endminute))
        return false;
      if (this.endminute != that.endminute)
        return false;
    }

    boolean this_present_bicycleID = true;
    boolean that_present_bicycleID = true;
    if (this_present_bicycleID || that_present_bicycleID) {
      if (!(this_present_bicycleID && that_present_bicycleID))
        return false;
      if (this.bicycleID != that.bicycleID)
        return false;
    }

    boolean this_present_tripduration = true;
    boolean that_present_tripduration = true;
    if (this_present_tripduration || that_present_tripduration) {
      if (!(this_present_tripduration && that_present_tripduration))
        return false;
      if (this.tripduration != that.tripduration)
        return false;
    }

    boolean this_present_fromstationID = true;
    boolean that_present_fromstationID = true;
    if (this_present_fromstationID || that_present_fromstationID) {
      if (!(this_present_fromstationID && that_present_fromstationID))
        return false;
      if (this.fromstationID != that.fromstationID)
        return false;
    }

    boolean this_present_fromstationname = true && this.isSetFromstationname();
    boolean that_present_fromstationname = true && that.isSetFromstationname();
    if (this_present_fromstationname || that_present_fromstationname) {
      if (!(this_present_fromstationname && that_present_fromstationname))
        return false;
      if (!this.fromstationname.equals(that.fromstationname))
        return false;
    }

    boolean this_present_tostationID = true;
    boolean that_present_tostationID = true;
    if (this_present_tostationID || that_present_tostationID) {
      if (!(this_present_tostationID && that_present_tostationID))
        return false;
      if (this.tostationID != that.tostationID)
        return false;
    }

    boolean this_present_tostationname = true && this.isSetTostationname();
    boolean that_present_tostationname = true && that.isSetTostationname();
    if (this_present_tostationname || that_present_tostationname) {
      if (!(this_present_tostationname && that_present_tostationname))
        return false;
      if (!this.tostationname.equals(that.tostationname))
        return false;
    }

    boolean this_present_usertype = true && this.isSetUsertype();
    boolean that_present_usertype = true && that.isSetUsertype();
    if (this_present_usertype || that_present_usertype) {
      if (!(this_present_usertype && that_present_usertype))
        return false;
      if (!this.usertype.equals(that.usertype))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_birthyear = true && this.isSetBirthyear();
    boolean that_present_birthyear = true && that.isSetBirthyear();
    if (this_present_birthyear || that_present_birthyear) {
      if (!(this_present_birthyear && that_present_birthyear))
        return false;
      if (this.birthyear != that.birthyear)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tripID = true;
    list.add(present_tripID);
    if (present_tripID)
      list.add(tripID);

    boolean present_startday = true;
    list.add(present_startday);
    if (present_startday)
      list.add(startday);

    boolean present_startmonth = true;
    list.add(present_startmonth);
    if (present_startmonth)
      list.add(startmonth);

    boolean present_startyear = true;
    list.add(present_startyear);
    if (present_startyear)
      list.add(startyear);

    boolean present_starthour = true;
    list.add(present_starthour);
    if (present_starthour)
      list.add(starthour);

    boolean present_startminute = true;
    list.add(present_startminute);
    if (present_startminute)
      list.add(startminute);

    boolean present_endday = true;
    list.add(present_endday);
    if (present_endday)
      list.add(endday);

    boolean present_endmonth = true;
    list.add(present_endmonth);
    if (present_endmonth)
      list.add(endmonth);

    boolean present_endyear = true;
    list.add(present_endyear);
    if (present_endyear)
      list.add(endyear);

    boolean present_endhour = true;
    list.add(present_endhour);
    if (present_endhour)
      list.add(endhour);

    boolean present_endminute = true;
    list.add(present_endminute);
    if (present_endminute)
      list.add(endminute);

    boolean present_bicycleID = true;
    list.add(present_bicycleID);
    if (present_bicycleID)
      list.add(bicycleID);

    boolean present_tripduration = true;
    list.add(present_tripduration);
    if (present_tripduration)
      list.add(tripduration);

    boolean present_fromstationID = true;
    list.add(present_fromstationID);
    if (present_fromstationID)
      list.add(fromstationID);

    boolean present_fromstationname = true && (isSetFromstationname());
    list.add(present_fromstationname);
    if (present_fromstationname)
      list.add(fromstationname);

    boolean present_tostationID = true;
    list.add(present_tostationID);
    if (present_tostationID)
      list.add(tostationID);

    boolean present_tostationname = true && (isSetTostationname());
    list.add(present_tostationname);
    if (present_tostationname)
      list.add(tostationname);

    boolean present_usertype = true && (isSetUsertype());
    list.add(present_usertype);
    if (present_usertype)
      list.add(usertype);

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender);

    boolean present_birthyear = true && (isSetBirthyear());
    list.add(present_birthyear);
    if (present_birthyear)
      list.add(birthyear);

    return list.hashCode();
  }

  @Override
  public int compareTo(DivvyTrips other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTripID()).compareTo(other.isSetTripID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTripID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tripID, other.tripID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartday()).compareTo(other.isSetStartday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startday, other.startday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartmonth()).compareTo(other.isSetStartmonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartmonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startmonth, other.startmonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartyear()).compareTo(other.isSetStartyear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartyear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startyear, other.startyear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarthour()).compareTo(other.isSetStarthour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarthour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starthour, other.starthour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartminute()).compareTo(other.isSetStartminute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartminute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startminute, other.startminute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndday()).compareTo(other.isSetEndday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endday, other.endday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndmonth()).compareTo(other.isSetEndmonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndmonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endmonth, other.endmonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndyear()).compareTo(other.isSetEndyear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndyear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endyear, other.endyear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndhour()).compareTo(other.isSetEndhour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndhour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endhour, other.endhour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndminute()).compareTo(other.isSetEndminute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndminute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endminute, other.endminute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBicycleID()).compareTo(other.isSetBicycleID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBicycleID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bicycleID, other.bicycleID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTripduration()).compareTo(other.isSetTripduration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTripduration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tripduration, other.tripduration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromstationID()).compareTo(other.isSetFromstationID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromstationID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromstationID, other.fromstationID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromstationname()).compareTo(other.isSetFromstationname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromstationname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromstationname, other.fromstationname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTostationID()).compareTo(other.isSetTostationID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTostationID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tostationID, other.tostationID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTostationname()).compareTo(other.isSetTostationname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTostationname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tostationname, other.tostationname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsertype()).compareTo(other.isSetUsertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usertype, other.usertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthyear()).compareTo(other.isSetBirthyear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthyear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthyear, other.birthyear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DivvyTrips(");
    boolean first = true;

    sb.append("tripID:");
    sb.append(this.tripID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startday:");
    sb.append(this.startday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startmonth:");
    sb.append(this.startmonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startyear:");
    sb.append(this.startyear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("starthour:");
    sb.append(this.starthour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startminute:");
    sb.append(this.startminute);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endday:");
    sb.append(this.endday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endmonth:");
    sb.append(this.endmonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endyear:");
    sb.append(this.endyear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endhour:");
    sb.append(this.endhour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endminute:");
    sb.append(this.endminute);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bicycleID:");
    sb.append(this.bicycleID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tripduration:");
    sb.append(this.tripduration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromstationID:");
    sb.append(this.fromstationID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromstationname:");
    if (this.fromstationname == null) {
      sb.append("null");
    } else {
      sb.append(this.fromstationname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tostationID:");
    sb.append(this.tostationID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tostationname:");
    if (this.tostationname == null) {
      sb.append("null");
    } else {
      sb.append(this.tostationname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usertype:");
    if (this.usertype == null) {
      sb.append("null");
    } else {
      sb.append(this.usertype);
    }
    first = false;
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetBirthyear()) {
      if (!first) sb.append(", ");
      sb.append("birthyear:");
      sb.append(this.birthyear);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tripID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startday' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startmonth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startyear' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'starthour' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startminute' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endday' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endmonth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endyear' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endhour' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endminute' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'bicycleID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tripduration' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'fromstationID' because it's a primitive and you chose the non-beans generator.
    if (fromstationname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromstationname' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'tostationID' because it's a primitive and you chose the non-beans generator.
    if (tostationname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tostationname' was not present! Struct: " + toString());
    }
    if (usertype == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'usertype' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DivvyTripsStandardSchemeFactory implements SchemeFactory {
    public DivvyTripsStandardScheme getScheme() {
      return new DivvyTripsStandardScheme();
    }
  }

  private static class DivvyTripsStandardScheme extends StandardScheme<DivvyTrips> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DivvyTrips struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRIP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tripID = iprot.readI64();
              struct.setTripIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STARTDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startday = iprot.readI32();
              struct.setStartdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STARTMONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startmonth = iprot.readI32();
              struct.setStartmonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STARTYEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startyear = iprot.readI32();
              struct.setStartyearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STARTHOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starthour = iprot.readI32();
              struct.setStarthourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STARTMINUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startminute = iprot.readI32();
              struct.setStartminuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENDDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endday = iprot.readI32();
              struct.setEnddayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENDMONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endmonth = iprot.readI32();
              struct.setEndmonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENDYEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endyear = iprot.readI32();
              struct.setEndyearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENDHOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endhour = iprot.readI32();
              struct.setEndhourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENDMINUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endminute = iprot.readI32();
              struct.setEndminuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BICYCLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bicycleID = iprot.readI64();
              struct.setBicycleIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TRIPDURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tripduration = iprot.readI64();
              struct.setTripdurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FROMSTATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fromstationID = iprot.readI64();
              struct.setFromstationIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FROMSTATIONNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromstationname = iprot.readString();
              struct.setFromstationnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TOSTATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tostationID = iprot.readI64();
              struct.setTostationIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TOSTATIONNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tostationname = iprot.readString();
              struct.setTostationnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.usertype = iprot.readString();
              struct.setUsertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.gender = iprot.readBool();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BIRTHYEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.birthyear = iprot.readI32();
              struct.setBirthyearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTripID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tripID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startday' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartmonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startmonth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartyear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startyear' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStarthour()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'starthour' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartminute()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startminute' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endday' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndmonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endmonth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndyear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endyear' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndhour()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endhour' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndminute()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endminute' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBicycleID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bicycleID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTripduration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tripduration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFromstationID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromstationID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTostationID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tostationID' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DivvyTrips struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TRIP_ID_FIELD_DESC);
      oprot.writeI64(struct.tripID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTDAY_FIELD_DESC);
      oprot.writeI32(struct.startday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTMONTH_FIELD_DESC);
      oprot.writeI32(struct.startmonth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTYEAR_FIELD_DESC);
      oprot.writeI32(struct.startyear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTHOUR_FIELD_DESC);
      oprot.writeI32(struct.starthour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTMINUTE_FIELD_DESC);
      oprot.writeI32(struct.startminute);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDDAY_FIELD_DESC);
      oprot.writeI32(struct.endday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDMONTH_FIELD_DESC);
      oprot.writeI32(struct.endmonth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDYEAR_FIELD_DESC);
      oprot.writeI32(struct.endyear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDHOUR_FIELD_DESC);
      oprot.writeI32(struct.endhour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDMINUTE_FIELD_DESC);
      oprot.writeI32(struct.endminute);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BICYCLE_ID_FIELD_DESC);
      oprot.writeI64(struct.bicycleID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIPDURATION_FIELD_DESC);
      oprot.writeI64(struct.tripduration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROMSTATION_ID_FIELD_DESC);
      oprot.writeI64(struct.fromstationID);
      oprot.writeFieldEnd();
      if (struct.fromstationname != null) {
        oprot.writeFieldBegin(FROMSTATIONNAME_FIELD_DESC);
        oprot.writeString(struct.fromstationname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOSTATION_ID_FIELD_DESC);
      oprot.writeI64(struct.tostationID);
      oprot.writeFieldEnd();
      if (struct.tostationname != null) {
        oprot.writeFieldBegin(TOSTATIONNAME_FIELD_DESC);
        oprot.writeString(struct.tostationname);
        oprot.writeFieldEnd();
      }
      if (struct.usertype != null) {
        oprot.writeFieldBegin(USERTYPE_FIELD_DESC);
        oprot.writeString(struct.usertype);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeBool(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBirthyear()) {
        oprot.writeFieldBegin(BIRTHYEAR_FIELD_DESC);
        oprot.writeI32(struct.birthyear);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DivvyTripsTupleSchemeFactory implements SchemeFactory {
    public DivvyTripsTupleScheme getScheme() {
      return new DivvyTripsTupleScheme();
    }
  }

  private static class DivvyTripsTupleScheme extends TupleScheme<DivvyTrips> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DivvyTrips struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.tripID);
      oprot.writeI32(struct.startday);
      oprot.writeI32(struct.startmonth);
      oprot.writeI32(struct.startyear);
      oprot.writeI32(struct.starthour);
      oprot.writeI32(struct.startminute);
      oprot.writeI32(struct.endday);
      oprot.writeI32(struct.endmonth);
      oprot.writeI32(struct.endyear);
      oprot.writeI32(struct.endhour);
      oprot.writeI32(struct.endminute);
      oprot.writeI64(struct.bicycleID);
      oprot.writeI64(struct.tripduration);
      oprot.writeI64(struct.fromstationID);
      oprot.writeString(struct.fromstationname);
      oprot.writeI64(struct.tostationID);
      oprot.writeString(struct.tostationname);
      oprot.writeString(struct.usertype);
      BitSet optionals = new BitSet();
      if (struct.isSetGender()) {
        optionals.set(0);
      }
      if (struct.isSetBirthyear()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetGender()) {
        oprot.writeBool(struct.gender);
      }
      if (struct.isSetBirthyear()) {
        oprot.writeI32(struct.birthyear);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DivvyTrips struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tripID = iprot.readI64();
      struct.setTripIDIsSet(true);
      struct.startday = iprot.readI32();
      struct.setStartdayIsSet(true);
      struct.startmonth = iprot.readI32();
      struct.setStartmonthIsSet(true);
      struct.startyear = iprot.readI32();
      struct.setStartyearIsSet(true);
      struct.starthour = iprot.readI32();
      struct.setStarthourIsSet(true);
      struct.startminute = iprot.readI32();
      struct.setStartminuteIsSet(true);
      struct.endday = iprot.readI32();
      struct.setEnddayIsSet(true);
      struct.endmonth = iprot.readI32();
      struct.setEndmonthIsSet(true);
      struct.endyear = iprot.readI32();
      struct.setEndyearIsSet(true);
      struct.endhour = iprot.readI32();
      struct.setEndhourIsSet(true);
      struct.endminute = iprot.readI32();
      struct.setEndminuteIsSet(true);
      struct.bicycleID = iprot.readI64();
      struct.setBicycleIDIsSet(true);
      struct.tripduration = iprot.readI64();
      struct.setTripdurationIsSet(true);
      struct.fromstationID = iprot.readI64();
      struct.setFromstationIDIsSet(true);
      struct.fromstationname = iprot.readString();
      struct.setFromstationnameIsSet(true);
      struct.tostationID = iprot.readI64();
      struct.setTostationIDIsSet(true);
      struct.tostationname = iprot.readString();
      struct.setTostationnameIsSet(true);
      struct.usertype = iprot.readString();
      struct.setUsertypeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.gender = iprot.readBool();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.birthyear = iprot.readI32();
        struct.setBirthyearIsSet(true);
      }
    }
  }

}

